// Generated by CoffeeScript 1.3.3
(function() {
  var Circle, calcDistance, canvas, cb, gridLine, height, impact, lander, mars, mx, my, surface, svg, width, x, y, _i, _j;

  mars = $('#mars-image');

  width = mars.width();

  height = mars.height();

  mx = d3.scale.linear().domain([221, -221]).range([0, width]);

  my = d3.scale.linear().domain([-131, 131]).range([height, 0]);

  canvas = d3.select('#overlay');

  canvas.selectAll("svg").remove();

  svg = canvas.append("svg");

  svg.attr("id", "plot").attr('width', width).attr('height', height);

  surface = svg.append('g').attr('width', width).attr('height', height).attr('id', 'surface');

  gridLine = function(x1, y1, x2, y2) {
    return surface.append("line").attr("x1", mx(x1)).attr("y1", my(y1)).attr("x2", mx(x2)).attr("y2", my(y2)).attr("class", "grid-line");
  };

  for (y = _i = -90; _i <= 90; y = _i += 10) {
    gridLine(-180, y, 180, y);
  }

  for (x = _j = -180; _j <= 180; x = _j += 10) {
    gridLine(x, -90, x, 90);
  }

  calcDistance = function(Lx, Ly, Ix, Iy) {
    var D, cos, d, l, pi, sin;
    pi = Math.PI;
    sin = function(a) {
      return Math.sin(a * pi / 180);
    };
    cos = function(a) {
      return Math.cos(a * pi / 180);
    };
    D = 3390;
    d = D * Math.acos(sin(Ly) * sin(Iy) + cos(Ly) * cos(Iy) * cos(Ix - Lx));
    l = function(s, x) {
      return $(s).html(Math.round(10 * x) / 10 + "<sup>&deg;</sup>");
    };
    l("#lander-lat", Ly);
    l("#lander-long", Lx);
    l("#impact-lat", Iy);
    l("#impact-long", Ix);
    return $("#distance").text(Math.round(d) + " km");
  };

  Circle = (function() {

    function Circle(container, x, y, r, cb) {
      var _this = this;
      this.container = container;
      this.x = x;
      this.y = y;
      this.r = r != null ? r : 10;
      this.cb = cb;
      x = mx(this.x);
      y = my(this.y);
      this.obj = this.container.append("circle").attr("transform", "translate(" + x + ", " + y + ")").attr("r", this.r).attr("class", "circle");
      this.obj.call(d3.behavior.drag().on("drag", function() {
        return _this.move(d3.event.x, d3.event.y, _this.cb);
      }));
    }

    Circle.prototype.move = function(x, y, cb) {
      var xx, yy;
      xx = x > 0 ? Math.max(0, Math.min(width, x)) : 0;
      yy = y > 0 ? Math.max(0, Math.min(height, y)) : 0;
      this.obj.attr("transform", "translate(" + xx + ", " + yy + ")");
      this.x = mx.invert(x);
      this.y = my.invert(y);
      return cb();
    };

    return Circle;

  })();

  cb = function() {
    return calcDistance(lander.x, lander.y, impact.x, impact.y);
  };

  lander = new Circle(surface, -129.6, 5.4, 10, (function() {
    return cb();
  }));

  impact = new Circle(surface, -10.8, 36, 10, (function() {
    return cb();
  }));

  cb();

}).call(this);
